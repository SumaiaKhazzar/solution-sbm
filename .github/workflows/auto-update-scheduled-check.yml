# This is autogenerated - do not touch!
name: Auto-update scheduled version check
on:
  schedule:
    - cron: '0 21 * * 1-4'
  repository_dispatch:
    types: [autoupdate]
  workflow_dispatch:


jobs:
  preflight:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.7 ]
    outputs:
      autoupdate_enabled: ${{ steps.autoupdate.outputs.autoupdate }}
      application_identifier: ${{ steps.autoupdate.outputs.application_identifier }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: pipx install lime-buildtools -i https://${{secrets.PYPI_USERNAME}}:${{secrets.PYPI_PASSWORD}}@pypi.lime.tech/simple
      - name: Validate autoupdate
        id: autoupdate
        run: lime-buildtools ci set-output-from-pyproject-deployment
  check:
    runs-on: ubuntu-latest
    needs: preflight
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.7 ]
        poetry-version: [ 1.0.10 ]
    if: needs.preflight.outputs.autoupdate_enabled == 'true' && needs.preflight.outputs.application_identifier != ''
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - run: pipx install lime-buildtools -i https://${{secrets.PYPI_USERNAME}}:${{secrets.PYPI_PASSWORD}}@pypi.lime.tech/simple
    - run: lime-buildtools ci check-for-new-lime-official-release
      id: check-release
      env:
        GITHUB_TOKEN: ${{ secrets.DISPATCH_TOKEN }}
    - run: lime-buildtools ci update-pyproject-versions
      if: steps.check-release.outputs.new_release_exists == 'true'
      env:
        LIME_CRM: ${{ steps.check-release.outputs.lime_crm }}
        LIME_IMAGEBAKER: ${{ steps.check-release.outputs.lime_imagebaker }}
    - uses: abatilo/actions-poetry@v2.0.0
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Cache Poetry virtualenv
      uses: actions/cache@v1
      id: cache
      with:
        path: .venv
        key: poetry-${{ runner.os }}}-${{ hashFiles('**/poetry.lock') }}
    - name: Set Poetry config
      run: |
        poetry config repositories.lime https://pypi.lime.tech/simple/
        poetry config http-basic.lime "${{secrets.PYPI_USERNAME}}" "${{secrets.PYPI_PASSWORD}}"
    - name: Update poetry lock
      if: steps.check-release.outputs.new_release_exists == 'true'
      run: poetry lock
    - name: Git add/commit changes
      if: steps.check-release.outputs.new_release_exists == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "feat: [new-lime-release] lime-crm ${{ steps.check-release.outputs.lime_crm  }}, lime-imagebaker ${{ steps.check-release.outputs.lime_imagebaker  }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: create pull request
      if: steps.check-release.outputs.new_release_exists == 'true'
      id: pr_generator
      uses: peter-evans/create-pull-request@v3
      with:
        title: "feat: [new-lime-release] lime-crm ${{ steps.check-release.outputs.lime_crm  }}, lime-imagebaker ${{ steps.check-release.outputs.lime_imagebaker  }}"
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: new_limerelease
        branch-suffix: random
    # https://github.com/peter-evans/create-pull-request/issues/48
    - run: lime-buildtools ci auto-generated-pr-trigger-ci-workflow
      if: steps.check-release.outputs.new_release_exists == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.DISPATCH_TOKEN }}
        REPOSITORY: ${{ github.repository}}
        PR_ID: ${{ env.PULL_REQUEST_NUMBER }}