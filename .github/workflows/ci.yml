# This is autogenerated - do not touch!
name: Test, build and release
on:
  push:
    branches:
      - main
      - master
      - dev
  pull_request:
    branches:
      - master
      - main
      - dev
jobs:
  # Test and lint Python
  test-python:
    name: Test and lint Python
    if: (!contains(github.event.head_commit.message, '[skip ci]'))
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.7 ]
        poetry-version: [ 1.0.10 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: .venv
          key: poetry-${{ runner.os }}}-${{ hashFiles('**/poetry.lock') }}
      - name: Set Poetry config
        run: |
          poetry config repositories.lime https://pypi.lime.tech/simple/
          poetry config http-basic.lime "${{secrets.PYPI_USERNAME}}" "${{secrets.PYPI_PASSWORD}}"
      - name: Install dependencies
        shell: bash
        run: poetry install 2>&1 | tee install.log
      - name: Check if lockfile not out of sync
        shell: bash
        run: |
          if grep -q "Warning: The lock file is not up to date with the latest changes in pyproject.toml." install.log; then
            echo Your pyproject.toml and lockfile is not in sync. Please re-lock
            exit 1
          else
            exit 0
          fi
      - run: poetry run flake8
      - run: poetry run pytest
  # Test and lint frontend
  test-frontend:
    name: Test and lint frontend
    if: (!contains(github.event.head_commit.message, '[skip ci]'))
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true
      - run: npm i -g npm@7.23.0
      - name: Check if has frontend
        id: frontend
        shell: bash
        run: |
          [ -d "frontend" ] && export has_frontend_value=yes || export has_frontend_value=no
          echo ::set-output name=has_frontend::$has_frontend_value
      # NPM Cache
      - name: Get npm cache directory
        if: steps.frontend.outputs.has_frontend == 'yes'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v1
        name: Get npm cache
        if: steps.frontend.outputs.has_frontend == 'yes'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Run tests
        if: steps.frontend.outputs.has_frontend == 'yes'
        shell: bash
        run: |
          cd frontend
          npm ci
          npm run build
          npm run lint
          npm run test
        env:
          CI: true
  # Anything below this will only run on a push to master
  release:
    name: Build and release
    needs: [test-python, test-frontend]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ 3.7 ]
        poetry-version: [ 1.0.10 ]
    outputs:
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_notes: ${{ steps.semantic.outputs.new_release_notes }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # Set up pip cache
      - name: Restore pip cache
        uses: actions/cache@v1
        with:
        
          path: ~/.cache/pip
        
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip
      - name: Check if has frontend
        id: frontend
        shell: bash
        run: |
          [ -d "frontend" ] && export has_frontend_value=yes || export has_frontend_value=no
          echo ::set-output name=has_frontend::$has_frontend_value
          # NPM Cache
      - name: Get npm cache directory
        if: steps.frontend.outputs.has_frontend == 'yes'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v1
        name: Get npm cache
        if: steps.frontend.outputs.has_frontend == 'yes'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: .venv
          key: poetry-${{ runner.os }}}-${{ hashFiles('**/poetry.lock') }}
      - name: Set Poetry config
        run: |
          poetry config repositories.lime https://pypi.lime.tech/simple/
          poetry config http-basic.lime "${{secrets.PYPI_USERNAME}}" "${{secrets.PYPI_PASSWORD}}"
      - run: pipx install lime-buildtools -i https://${{secrets.PYPI_USERNAME}}:${{secrets.PYPI_PASSWORD}}@pypi.lime.tech/simple
      # Create new release
      - run: poetry run pip install wheel
      - name: Create a new release and bump version
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 16.0.0
          extends: '@limetech/semantic-release-lime-buildtools'
          branches: |
            [
              "main",
              "master",
              {"name": "dev", "prerelease": true}
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      - name: Setup current versions gh output variables
        if: steps.semantic.outputs.new_release_published == 'true'
        id: versions
        run: lime-buildtools ci set-output-from-pyproject-versions

      - name: Update release name with lime-crm/imagebaker version
        if: steps.semantic.outputs.new_release_published == 'true'
        run: lime-buildtools ci update-release-name-with-metadata
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository}}
          RELEASE_TAG: "v${{ steps.semantic.outputs.new_release_version }}"
          LIME_CRM_VERSION: ${{ steps.versions.outputs.lime_crm }}
          LIME_IMAGEBAKER_VERSION: ${{ steps.versions.outputs.imagebaker }}

      - name: Install lime-imagebaker
        if: steps.semantic.outputs.new_release_published == 'true'
        run: pip install lime-imagebaker==${{ steps.versions.outputs.imagebaker }} -i https://${{secrets.PYPI_USERNAME}}:${{secrets.PYPI_PASSWORD}}@pypi.lime.tech/simple

      # Get the wheelhouse path
      - name: Get wheelhouse path
        if: steps.semantic.outputs.new_release_published == 'true'
        id: wheelhouse
        shell: bash
        run: |
          WHEELHOUSE=$(find ./dist -type f -name "*.tar.gz")
          echo "::set-output name=wheelhouse::$(pwd)/dist/${WHEELHOUSE##*/}"

      # Get repo id
      - run: lime-buildtools ci set-output-repository-id
        if: steps.semantic.outputs.new_release_published == 'true'
        id: repository_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository}}

      # Create a build-images deployment and set status to in progress
      - run: lime-imagebaker ghtools start-deployment --set-gh-env
        if: steps.semantic.outputs.new_release_published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository }}
          REF: ${{ github.ref }}

      # Build and publish solution images.
      - name: Build images and publish
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          lime-imagebaker appstack build && lime-imagebaker appstack publish
        env:
          SOLUTION_NAME: "solution-sbm"
          WHEELHOUSE_PATH: "${{ steps.wheelhouse.outputs.wheelhouse }}"
          SOLUTION_VERSION: "v${{ steps.semantic.outputs.new_release_version }}"
          REPOSITORY_ID: "${{ steps.repository_id.outputs.repo_id }}"
          SECRET_ID: "production_secret_ecr_access_for_consultants"
          AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      # Update deployment status and append version of imagebaker to description.
      - name: Dispatch deployment status update (success)
        if: success() && steps.semantic.outputs.new_release_published == 'true'
        run: lime-imagebaker ghtools update-deployment-status --append-version
        env:
          REPOSITORY: ${{ github.repository}}
          DEPLOYPLAN_ID: ${{ env.BUILD_IMAGES_DEPLOYPLAN_ID }}
          STATE: "success"
          DESCRIPTION: "solution-${{ steps.repository_id.outputs.repo_id }}/v${{ steps.semantic.outputs.new_release_version }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dispatch deployment status update (failure)
        if: failure() && steps.semantic.outputs.new_release_published == 'true'
        run: lime-imagebaker ghtools update-deployment-status
        env:
          REPOSITORY: ${{ github.repository }}
          DEPLOYPLAN_ID: ${{ env.BUILD_IMAGES_DEPLOYPLAN_ID }}
          STATE: "failure"
          DESCRIPTION: "Failed to build and publish images"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  automerge:
      name: Automerge auto update
      needs: [test-python, test-frontend]
      if: contains(github.event.pull_request.title, '[new-lime-release]')
      runs-on: ubuntu-latest
      steps:
        - name: automerge
          uses: "pascalgn/automerge-action@v0.12.0"
          env:
            GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
            MERGE_METHOD: "rebase"
            MERGE_DELETE_BRANCH: "true"
            MERGE_LABELS: "" # merge all PRs
        - name: Dispatch build-and-auto-deploy process event
          uses: Lundalogik/repository-dispatch@v1
          with:
            token: ${{ secrets.DISPATCH_TOKEN }}
            event-type: build-and-auto-deploy-new-lime-release
            repository: ${{ github.repository }}


